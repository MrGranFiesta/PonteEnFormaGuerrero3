package com.mrgranfiesta.ponteenformaguerrero3.data.other

import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import java.io.File
import java.io.IOException

@RunWith(RobolectricTestRunner::class)
class CheckDrawableTest {
    @Test
    fun `verificar que todos los recursos drawable existen`() {
        try {
            val drawableDirs =
                File(".", "src/main/res/drawable")
            if (!drawableDirs.exists()) {
                Assert.fail("No se encontraron carpetas drawable en el proyecto")
            }
            val expectedFiles = listOf(
                "ejer1_999_963.webp",
                "ejer1_999_964.webp",
                "ejer1_999_965.webp",
                "ejer1_999_966.webp",
                "ejer1_999_967.webp",
                "ejer1_999_968.webp",
                "ejer1_999_969.webp",
                "ejer1_999_970.webp",
                "ejer1_999_971.webp",
                "ejer1_999_972.webp",
                "ejer1_999_973.webp",
                "ejer1_999_974.webp",
                "ejer1_999_975.webp",
                "ejer1_999_976.webp",
                "ejer1_999_977.webp",
                "ejer1_999_978.webp",
                "ejer1_999_979.webp",
                "ejer1_999_980.webp",
                "ejer1_999_981.webp",
                "ejer1_999_982.webp",
                "ejer1_999_983.webp",
                "ejer1_999_984.webp",
                "ejer1_999_985.webp",
                "ejer1_999_987.webp",
                "ejer1_999_988.webp",
                "ejer1_999_989.webp",
                "ejer1_999_990.webp",
                "ejer1_999_991.webp",
                "ejer1_999_992.webp",
                "ejer1_999_993.webp",
                "ejer1_999_994.webp",
                "ejer1_999_995.webp",
                "ejer1_999_996.webp",
                "ejer1_999_997.webp",
                "ejer1_999_998.webp",
                "ejer1_999_999.webp",
                "ejer2_000_000.webp",
                "mov_art1.webp",
                "mov_art2.webp",
                "mov_art3.webp",
                "mov_art4.webp",
                "mov_art5.webp",
                "mov_art6.webp",
                "mov_art7.webp",
                "mov_art8.webp",
                "mov_art9.webp",
                "mov_art10.webp",
                "mov_art11.webp",
                "mov_art12.webp",
                "mov_art13.webp",
                "mov_art13.webp",
                "mov_art14.webp",
                "mov_art15.webp",
                "est1.webp",
                "est2.webp",
                "est3.webp",
                "est4.webp",
                "est5.webp",
                "est6.webp",
                "est7.webp",
                "est8.webp",
                "est9.webp",
                "est10.webp",
                "est11.webp",
                "est12.webp",
                "est13.webp",
                "est14.webp",
                "est15.webp",
                "man1_1.webp",
                "man2_1.webp",
                "man2_2.webp",
                "man3_1.webp",
                "man4_1.webp",
                "man4_2.webp",
                "man4_3.webp",
                "man5_1.webp",
                "man5_2.webp",
                "man6_1.webp",
                "man6_2.webp",
                "man6_3.webp",
                "man7_1.webp",
                "man7_2.webp",
                "man8_1.webp",
                "man8_2.webp",
                "man8_3.webp",
                "man9_1.webp",
                "man9_2.webp",
                "man10_1.webp",
                "man10_2.webp",
                "man11_1.webp",
                "man11_2.webp",
                "man11_3.webp",
                "man12_1.webp",
                "man12_2.webp",
                "man12_3.webp",
                "man13_1.webp",
                "man13_2.webp",
                "man14_1.webp",
                "man14_2.webp",
                "man15_1.webp",
                "man15_2.webp",
                "man16_1.webp",
                "man16_2.webp",
                "man17_1.webp",
                "man17_2.webp",
                "man17_3.webp",
                "man18_1.webp",
                "man18_2.webp",
                "man19_1.webp",
                "man19_2.webp",
                "man20_1.webp",
                "man20_2.webp",
                "man20_3.webp",
                "man21_1.webp",
                "man21_2.webp",
                "man22_1.webp",
                "man22_2.webp",
                "man23_1.webp",
                "man23_2.webp",
                "man24_1.webp",
                "man24_2.webp",
                "man24_3.webp",
                "man25_1.webp",
                "man26_1.webp",
                "man26_2.webp",
                "man27_1.webp",
                "man28_1.webp",
                "man29_1.webp",
                "man30_1.webp",
                "man30_2.webp",
                "man33_1.webp",
                "man33_2.webp",
                "man34_1.webp",
                "man34_2.webp",
                "material999_980.webp",
                "material999_981.webp",
                "material999_982.webp",
                "material999_983.webp",
                "material999_984.webp",
                "material999_985.webp",
                "material999_986.webp",
                "material999_987.webp",
                "material999_988.webp",
                "material999_989.webp",
                "material999_990.webp",
                "material999_991.webp",
                "material999_992.webp",
                "material999_993.webp",
                "material999_994.webp",
                "material999_995.webp",
                "material999_996.webp",
                "material999_997.webp",
                "material999_998.webp",
                "material999_999.webp",
                "material1_000_000.webp",
                "material_music.webp"
            )

            for (expectedFile in expectedFiles) {
                val file = File(drawableDirs, expectedFile)
                Assert.assertTrue(
                    "El archivo '$expectedFile' no se encontr√≥ en ninguna carpeta drawable",
                    file.exists()
                )
            }
        } catch (e: IOException) {
            Assert.fail("Error al buscar los archivos: ${e.message}")
        }
    }
}